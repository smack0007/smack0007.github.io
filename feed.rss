<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
	<channel>
	<title>The Blog of Zachary Snow</title>
	<description>The Blog of Zachary Snow</description>
	<link>http://smack0007.github.io/</link>
	<lastBuildDate>Wed, 14 Oct 2020 13:43:29 GMT</lastBuildDate>
	<pubDate>Wed, 14 Oct 2020 00:00:00 GMT</pubDate>
	<ttl>1800</ttl>
	<item>
		<title><![CDATA[Node script for syntax highlighting]]></title>
		<description><![CDATA[<p>I decided to switch my blog to use highlightjs instead of the mixture of my own library and
<a href="https://github.com/windows-toolkit/ColorCode-Universal">ColorCode</a>. I still wanted everything to rendered statically
though so I decided to use <a href="https://highlightjs.org/">highlight.js</a> as it already offered instructions on how to use the
library from node.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2020/node-script-for-syntax-highlighting.html</link>
		<guid>http://smack0007.github.io/blog/2020/node-script-for-syntax-highlighting.html</guid>
		<pubDate>Wed, 14 Oct 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Angular in Visual Studio]]></title>
		<description><![CDATA[<p>Now that the <a href="https://devblogs.microsoft.com/visualstudio/angular-language-service-for-visual-studio/">Angular Language Service</a>
is available for Visual Studio working on Angular projects from inside Visual Studio is a viable option. The linked blog
post mentions a couple of ways of adding the Angular project to Visual Studio but I felt the suggestions left something
to be desired here is what I came up with.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2020/angular-in-visual-studio.html</link>
		<guid>http://smack0007.github.io/blog/2020/angular-in-visual-studio.html</guid>
		<pubDate>Thu, 08 Oct 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Creating a asp.net web app with an Angular frontend]]></title>
		<description><![CDATA[<p>We're going to create a what I call a &quot;WebShell&quot; application with asp.net core on the backend and Angular on the
frontend.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2020/creating-a-asp.net-web-app-with-an-angular-frontend.html</link>
		<guid>http://smack0007.github.io/blog/2020/creating-a-asp.net-web-app-with-an-angular-frontend.html</guid>
		<pubDate>Fri, 02 Oct 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Predictable Random Number Generation in TypeScript]]></title>
		<description><![CDATA[<p>I got the idea for using this type of RNG from the javidx9 video
<a href="https://www.youtube.com/watch?v=ZZY9YE7rZJw">Procedural Generation: Programming The Universe</a>.
It's a really good video as are most of the videos he produces so
I recommend you give it a watch. The algorithm he talks about in
the video is the <a href="https://en.wikipedia.org/wiki/Lehmer_random_number_generator">Lehmer random number generator</a>.</p>
<p>I'm implementing a simple match the blocks game in TypeScript and I wanted to implement the algorithm
mentioned there in TypeScript.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2020/predictable-random-number-generation-in-typescript.html</link>
		<guid>http://smack0007.github.io/blog/2020/predictable-random-number-generation-in-typescript.html</guid>
		<pubDate>Tue, 25 Aug 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Creating a tsexec command]]></title>
		<description><![CDATA[<p>I want to use TypeScript as a scripting language for my machine and
so I want to be able just to execute TypeScript files directly. There
are npm packages like <a href="https://www.npmjs.com/package/ts-node">ts-node</a>
that do this already but I wanted to have a crack at implementing it
myself. So this is the batch file I've come up with so far.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2020/creating-a-tsexec-command.html</link>
		<guid>http://smack0007.github.io/blog/2020/creating-a-tsexec-command.html</guid>
		<pubDate>Fri, 21 Aug 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Checking for uncommited git changes in a batch program]]></title>
		<description><![CDATA[<p>Sometimes it's helpful to exit out of a batch script if there are pending
changes to a repo. This is done in batch script in a non intuitive way.</p>
<pre><code class="hljs shell">@ECHO OFF
PUSHD %~dp0

SET __HAS_CHANGES=0

REM The loop won&#x27;t be executed if &#x27;git status -s&#x27; doesn&#x27;t produce any output.
FOR /f &quot;tokens=*&quot; %%i IN (&#x27;git status -s&#x27;) DO ( SET __HAS_CHANGES=1 )

REM Check if the loop was executed and goto EXIT if it was.
IF &quot;%__HAS_CHANGES%&quot; NEQ &quot;0&quot; (
    ECHO There are currently uncommitted changes.
    GOTO EXIT
)

REM Do the work you want to do here.

:EXIT
POPD</pre></code>
]]></description>
		<link>http://smack0007.github.io/blog/2020/checking-for-uncommited-git-changes-in-a-batch-program.html</link>
		<guid>http://smack0007.github.io/blog/2020/checking-for-uncommited-git-changes-in-a-batch-program.html</guid>
		<pubDate>Wed, 22 Jul 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Enum Extension Methods]]></title>
		<description><![CDATA[<p>Did you know you can create extension methods for enums?</p>
]]></description>
		<link>http://smack0007.github.io/blog/2020/enum-extension-methods.html</link>
		<guid>http://smack0007.github.io/blog/2020/enum-extension-methods.html</guid>
		<pubDate>Fri, 17 Jul 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Disable C# null checks for a field or property]]></title>
		<description><![CDATA[<p>The new nullable reference types in C# are great but sometimes you might need to disable it for a
single field or property. You can do that by assigning the value to <code>null</code> and using the <code>!</code> operator.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2020/disable-csharp-null-checks-for-a-field-or-property.html</link>
		<guid>http://smack0007.github.io/blog/2020/disable-csharp-null-checks-for-a-field-or-property.html</guid>
		<pubDate>Thu, 02 Jan 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Use nameof() to set a string variable to its name]]></title>
		<description><![CDATA[<p>This is one of those things that should have just been obvious to me
but once I saw it I wondered why I had never thought to use it myself.
<code>nameof()</code> can be used when declaring a variable to set the value of the
variable to the name of the variable:</p>
<pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">string</span> MyVariable1 = <span class="hljs-keyword">nameof</span>(MyVariable1);

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"></span>)</span>
{
    Console.WriteLine(MyVariable1);
}</pre></code>
]]></description>
		<link>http://smack0007.github.io/blog/2019/use-nameof-to-set-string-variable-to-its-name.html</link>
		<guid>http://smack0007.github.io/blog/2019/use-nameof-to-set-string-variable-to-its-name.html</guid>
		<pubDate>Tue, 17 Dec 2019 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Dynamically loaded DLL thows AccessViolationException on first function call]]></title>
		<description><![CDATA[<p>In my library <a href="https://github.com/smack0007/GLESDotNet">GLESDotNet</a> I load
the <code>libegl.dll</code> and <code>libglesv2.dll</code> DLLs dynamically via the Win32 functions
<a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibraryw">LoadLibrary</a>
and <a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress">GetProcAddress</a>.
I already had everything working via <code>DLLImport</code> but I wanted to be able to
load the DLLs from different subdirectories depending on the architecture.</p>
<p>For the  first test I only loaded the <code>libegl.dll</code> DLL before moving on to
the <code>libglesv2.dll</code>. I made the classic programmer mistake of changing too much
at one time. The first call to any function in <code>libegl.dll</code> resulted in an
<code>AccessViolationException</code>. I couldn't figure out what was going wrong so I
decided to revert my changes and try again.</p>
<p>I noticed that when the DLLs were in the same directory the
<code>AccessViolationException</code> went away. Changing the working directory
to the directory of the DLLs also solved the problem once the DLLs
were placed in subdirectories again. This led me to believe that
loading <code>libegl.dll</code> must be implicitly loading <code>libglesv2.dll</code>. Loading
<code>libglesv2.dll</code> via <code>LoadLibrary</code> along with <code>libegl.dll</code> solved the problem.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2019/dynamically-loaded-dll-thows-accessviolationexception-on-first-function-call.html</link>
		<guid>http://smack0007.github.io/blog/2019/dynamically-loaded-dll-thows-accessviolationexception-on-first-function-call.html</guid>
		<pubDate>Tue, 22 Oct 2019 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Abusing IDisposable]]></title>
		<description><![CDATA[<p>In C# the interface <code>IDisposable</code> is usually used to indicate that an object
needs to dispose of unmanaged resources. C# provides the <code>using</code> syntax to
ensure that the <code>Dispose</code> method is called once the instance of the object is
no longer needed.</p>
<p><code>Dispose</code> is just like any other method though and the <code>using</code> syntax can
be used quite nicely for other use cases as well. Let's create a class we
can use to collect some actions to be &quot;deferred&quot; until a later time.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2019/abusing-idisposable.html</link>
		<guid>http://smack0007.github.io/blog/2019/abusing-idisposable.html</guid>
		<pubDate>Tue, 27 Aug 2019 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Generating string permutations for unit testing]]></title>
		<description><![CDATA[<p>I needed to parse a string containing 6 characters. Each character should only
be one of 3 possibilities: '?' for null, '0' for false or '1' for true. The problem
sounded easy enough to generate a whole bunch of unit tests for.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2019/generating-string-permutations-for-unit-testing.html</link>
		<guid>http://smack0007.github.io/blog/2019/generating-string-permutations-for-unit-testing.html</guid>
		<pubDate>Mon, 11 Feb 2019 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Functional Card Deck in C#]]></title>
		<description><![CDATA[<p>I've been inspired lately by Mark Seemann's series of posts about <a href="http://blog.ploeh.dk/2018/10/01/applicative-functors/">Applicative Functors</a>. One of the latest posts is an example about
creating a <a href="http://blog.ploeh.dk/2018/10/08/full-deck/">full deck</a> of cards. Most of posts up to this
point have contained a C# example but for some reason this one didn't. This inspired me to take a shot at it.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/functional-card-deck-in-csharp.html</link>
		<guid>http://smack0007.github.io/blog/2018/functional-card-deck-in-csharp.html</guid>
		<pubDate>Thu, 11 Oct 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Enabling the latest version of C#]]></title>
		<description><![CDATA[<p>As of this writing when creating a new console project via <code>dotnet new console</code> the version of C# used in the project
is version 7.0. This means you're missing out cool features like <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-1#default-literal-expressions">Default Literal Expressions</a>. The language version
can be changed via Visual Studio though I prefer to enable it via MSBuild. This can be done in the <code>csproj</code> file
or globally via a <code>Build.Directory.props</code> file. Changing the C# language version is done via a property known as <code>LangVersion</code>.</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">PropertyGroup</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">LangVersion</span>&gt;</span>latest<span class="hljs-tag">&lt;/<span class="hljs-name">LangVersion</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">PropertyGroup</span>&gt;</span></pre></code>
<p>This property can set to any of the values listed <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/langversion-compiler-option">here</a>. As of
this writing VS Code doesn't seem to like it when you use 7.3 instead of latest. VS Code will show errors in your code
although the code will compile without any problems.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/enabling-the-latest-version-of-csharp.html</link>
		<guid>http://smack0007.github.io/blog/2018/enabling-the-latest-version-of-csharp.html</guid>
		<pubDate>Thu, 21 Jun 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[A neat way to curry in C#]]></title>
		<description><![CDATA[<p>I was reading an older blogpost from <a href="http://mikehadlow.blogspot.de/2015/09/partial-application-in-c.html">Mike Hadlow</a> about
<a href="http://mikehadlow.blogspot.de/2015/09/partial-application-in-c.html">Partial Application in C#</a> in which he discusses how
<a href="https://en.wikipedia.org/wiki/Partial_application">Partial Application</a> can be implemented in C# via
<a href="https://en.wikipedia.org/wiki/Currying">Currying</a>. Although I appreciate his example of implementing currying via extsion
methods, the syntax is hideous. There is a suggestion in the comments though that I found to be a much better solution.</p>
<pre><code class="hljs csharp"><span class="hljs-comment">// Define a local function Add.</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Add</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b</span>)</span> =&gt; a + b;

<span class="hljs-comment">// Here we do the currying.</span>
Func&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; add3 = (b) =&gt; Add(<span class="hljs-number">3</span>, b);

<span class="hljs-comment">// This will print 5.</span>
Console.WriteLine(add3(<span class="hljs-number">2</span>));

<span class="hljs-comment">// Curry one more time so that we have</span>
<span class="hljs-comment">// a function that simply produces 5.</span>
Func&lt;<span class="hljs-keyword">int</span>&gt; five = () =&gt; add3(<span class="hljs-number">2</span>);

<span class="hljs-comment">// This will also print 5.</span>
Console.WriteLine(five());</pre></code>
]]></description>
		<link>http://smack0007.github.io/blog/2018/a-neat-way-to-curry-in-csharp.html</link>
		<guid>http://smack0007.github.io/blog/2018/a-neat-way-to-curry-in-csharp.html</guid>
		<pubDate>Fri, 25 May 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Lambda Collection Wrappers]]></title>
		<description><![CDATA[<p>I've been reading a lot as of late about functional programming and I try to
incorperate as much as possible into my everyday programming. One trick that
I've definitely started using is wrapping collections in lambda functions.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/lambda-collection-wrappers.html</link>
		<guid>http://smack0007.github.io/blog/2018/lambda-collection-wrappers.html</guid>
		<pubDate>Thu, 26 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[string.Join Extension Method]]></title>
		<description><![CDATA[<p>Normally if want to do a <code>string.Join</code> on the result of a Linq query you end up with somthing looking like
this:</p>
<pre><code class="hljs csharp">Console.WriteLine(<span class="hljs-keyword">string</span>.Join(<span class="hljs-string">&quot;, &quot;</span>, numbers.Where(x =&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)));</pre></code>
<p>The call to <code>string.Join</code> has to come first and then the Linq query. I've always felt this breaks the flow
of the code and would be easier to read if the <code>string.Join</code> was at the end of the Linq query:</p>
<pre><code class="hljs csharp">Console.WriteLine(numbers.Where(x =&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>).JoinString(<span class="hljs-string">&quot;, &quot;</span>));</pre></code>
<p>This can be implemented with the following extension methods:</p>
<pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">JoinStringExtensions</span>
{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">string</span> <span class="hljs-title">JoinString</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-keyword">this</span> IEnumerable&lt;T&gt; source, <span class="hljs-keyword">string</span> seperator</span>)</span> =&gt;
        <span class="hljs-keyword">string</span>.Join(seperator, source.Select(x =&gt; x.ToString()));

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">string</span> <span class="hljs-title">JoinString</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> IEnumerable&lt;<span class="hljs-keyword">string</span>&gt; source, <span class="hljs-keyword">string</span> seperator</span>)</span> =&gt;
        <span class="hljs-keyword">string</span>.Join(seperator, source);
}</pre></code>
<p>The specialization for <code>IEnumerable&lt;string&gt;</code> is just mirroring the implementation from <code>string.Join</code>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/string-join-extension-method.html</link>
		<guid>http://smack0007.github.io/blog/2018/string-join-extension-method.html</guid>
		<pubDate>Thu, 19 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Run a program directly after building in VS Code]]></title>
		<description><![CDATA[<p>Whenever I have a program that is just a generator of some kind I like to have that
program execute directly after having built the program successfully. I'm going to show
how to run the program via the dotnet cli but this trick can easily be applied to regular
.NET programs or any program which is built using MSBuild.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/run-program-directly-after-building-vscode.html</link>
		<guid>http://smack0007.github.io/blog/2018/run-program-directly-after-building-vscode.html</guid>
		<pubDate>Wed, 11 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Merging Build.Directory.props]]></title>
		<description><![CDATA[<p>MSBuild version 15 introduced the concept of &quot;Directory.Build.props&quot; files. From the docs:</p>
<ul>
<li><code>Directory.Build.props</code> is a user-defined file that provides customizations to projects under a directory. This
file is automatically imported from Microsoft.Common.props unless the property <code>ImportDirectoryBuildTargets</code> is
set to false.</li>
</ul>
<p>What is not stated here is that only one <code>Directory.Build.props</code> will be imported automatically. Imagine your project
exists in the directory <code>C:\repo\src\foo\foo.csproj</code> and there exists a file in both <code>C:\repo\src\Directory.Build.props</code> and
<code>C:\repo\Directory.Build.props</code> then only <code>C:\repo\src\Directory.Build.props</code> will be automatically included when building
<code>C:\repo\src\foo\foo.csproj</code>. If you would like <code>C:\repo\Directory.Build.props</code> to be included as well, then
<code>C:\repo\src\Directory.Build.props</code> will have to include <code>C:\repo\Directory.Build.props</code> like so:</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Project</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">Import</span> <span class="hljs-attr">Project</span>=<span class="hljs-string">&quot;$([MSBuild]::GetPathOfFileAbove(&#x27;Directory.Build.props&#x27;, &#x27;$(MSBuildThisFileDirectory)../&#x27;))&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">Project</span>&gt;</span></pre></code>
<p>This is documented <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build#use-case-multi-level-merging">here</a>.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/merging-build-directory-props.html</link>
		<guid>http://smack0007.github.io/blog/2018/merging-build-directory-props.html</guid>
		<pubDate>Wed, 04 Apr 2018 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Git Quick Push]]></title>
		<description><![CDATA[<p>Here's a quick one liner to quickly stage all your changes in the current git repo, commit them and then push
the commit to origin master branch.</p>
]]></description>
		<link>http://smack0007.github.io/blog/2018/git-quick-push.html</link>
		<guid>http://smack0007.github.io/blog/2018/git-quick-push.html</guid>
		<pubDate>Thu, 29 Mar 2018 00:00:00 GMT</pubDate>
	</item>
	</channel>
</rss>

