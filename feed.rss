<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
	<atom:link href="https://smack0007.github.io/feed.rss" rel="self" type="application/rss+xml" />
	<title>The Blog of Zachary Snow</title>
	<description>The Blog of Zachary Snow</description>
	<link>https://smack0007.github.io/</link>
	<lastBuildDate>Wed, 06 Apr 2022 00:00:00 GMT</lastBuildDate>
	<pubDate>Wed, 06 Apr 2022 00:00:00 GMT</pubDate>
	<ttl>1800</ttl>
	<item>
		<title><![CDATA[Iterating thru an Object in JavaScript]]></title>
		<description><![CDATA[<p>For the longest time if I wanted to iterate thru an object
in JavaScript I would write code that looked something like
this:</p>
<pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = { <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;bar&quot;</span> };
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(key, obj[key]);
}
</code></pre>
<p>Since ES2017 there is a better way of doing this using <code>Object.entries()</code>
and destructuring:</p>
<pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = { <span class="hljs-attr">a</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-attr">b</span>: <span class="hljs-string">&quot;bar&quot;</span> };
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [ key, value ] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)) {
    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(key, value);
}
</code></pre>]]></description>
		<link>https://smack0007.github.io/blog/2022/iterating-thru-an-object-in-javascript.html</link>
		<guid>https://smack0007.github.io/blog/2022/iterating-thru-an-object-in-javascript.html</guid>
		<pubDate>Wed, 06 Apr 2022 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Powershell time command]]></title>
		<description><![CDATA[<p>I commbined the best parts of this <a href="https://stackoverflow.com/a/4801509/26566">StackOverflow answer</a> and this
<a href="https://superuser.com/a/1289962/3465">Super User answer</a> to come up with this solution for a <code>time</code> function
in Powershell:</p>
<pre><code class="hljs powershell"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">time</span></span> {
    <span class="hljs-variable">$Command</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$args</span>&quot;</span>;
    (<span class="hljs-built_in">Measure-Command</span> { <span class="hljs-built_in">Invoke-Expression</span> <span class="hljs-variable">$Command</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | <span class="hljs-built_in">Out-Default</span> }).ToString();
}
</code></pre>
<p>Example usage:</p>
<pre><code class="hljs cmd"># <span class="hljs-built_in">time</span> git pull
<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">01</span>.<span class="hljs-number">0804938</span>
</code></pre>
]]></description>
		<link>https://smack0007.github.io/blog/2022/powershell-time-command.html</link>
		<guid>https://smack0007.github.io/blog/2022/powershell-time-command.html</guid>
		<pubDate>Thu, 10 Mar 2022 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Practical WebAssembly]]></title>
		<description><![CDATA[<p>I wrote an article for my company <a href="https://conciso.de">conciso</a> that attempts to show a practical 
usage of WebAssembly: <a href="https://conciso.de/practical-webassembly/">https://conciso.de/practical-webassembly/</a>.</p>
]]></description>
		<link>https://smack0007.github.io/blog/2021/practical-wasm.html</link>
		<guid>https://smack0007.github.io/blog/2021/practical-wasm.html</guid>
		<pubDate>Fri, 17 Dec 2021 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Use bash.exe to run bash scripts in Windows]]></title>
		<description><![CDATA[<p>If you have the Windows Subsystem for Linux (WSL) installed then you can use <code>wsl.exe</code> to start
any linux distribution you have installed from the command prompt. What I recently learned about
though is that there is a <code>bash.exe</code> as well which can be used to execute a bash script directly.</p>]]></description>
		<link>https://smack0007.github.io/blog/2021/use-bash-exe-to-run-scripts-in-windows.html</link>
		<guid>https://smack0007.github.io/blog/2021/use-bash-exe-to-run-scripts-in-windows.html</guid>
		<pubDate>Wed, 01 Sep 2021 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Powered by TypeScript]]></title>
		<description><![CDATA[<p>Over the past couple of years my career has moved more and more torwards me becoming
a frontend developer. Since 2018 I&#39;ve basically been a TypeScript programmer professionally
and the language has really grown on me. Over the last couple of days I&#39;ve had some
down time so I decided now was the time to reprogram the blog in TypeScript.</p>
<p>The site is still a static site but the compiler is a now a custom TypeScript program. The
size of the program is now considerably smaller but that isn&#39;t necessarily becuase C# was
bad but rather that this is the 2nd implementation and I know what I did and did not need.</p>
]]></description>
		<link>https://smack0007.github.io/blog/2021/powered-by-typescript.html</link>
		<guid>https://smack0007.github.io/blog/2021/powered-by-typescript.html</guid>
		<pubDate>Fri, 04 Jun 2021 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Windows Terminal fork command]]></title>
		<description><![CDATA[<p>I wanted a way to <a href="https://man7.org/linux/man-pages/man2/fork.2.html">fork</a> the current tab in <a href="https://github.com/microsoft/terminal">Windows Terminal</a> and
so I&#39;ve come up with this PowerShell function:</p>
<pre><code class="hljs powershell"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fork</span></span> { wt <span class="hljs-literal">-w</span> <span class="hljs-number">0</span> <span class="hljs-literal">-d</span> <span class="hljs-string">&quot;<span class="hljs-variable">$</span>(Get-Location)&quot;</span> }
</code></pre>
]]></description>
		<link>https://smack0007.github.io/blog/2021/windows-terminal-fork-command.html</link>
		<guid>https://smack0007.github.io/blog/2021/windows-terminal-fork-command.html</guid>
		<pubDate>Wed, 12 May 2021 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Convert TypeScript AST to JSON]]></title>
		<description><![CDATA[<p>I needed to convert a TypeScript AST (Abstract Syntax Tree) to json so that I can consume it in
a C# application so I wrote a tiny node script to convert the AST to json.</p>]]></description>
		<link>https://smack0007.github.io/blog/2021/convert-typescript-ast-to-json.html</link>
		<guid>https://smack0007.github.io/blog/2021/convert-typescript-ast-to-json.html</guid>
		<pubDate>Wed, 13 Jan 2021 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Starting Redis and the Redis CLI with Docker]]></title>
		<description><![CDATA[<p>If you&#39;d like to get a Redis instance up and running to play with it&#39;s fairly easy via Docker.</p>]]></description>
		<link>https://smack0007.github.io/blog/2021/starting-redis-and-the-redis-cli-with-docker.html</link>
		<guid>https://smack0007.github.io/blog/2021/starting-redis-and-the-redis-cli-with-docker.html</guid>
		<pubDate>Fri, 08 Jan 2021 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[NativeLibraryLoader for Assembly with ModuleInitializer]]></title>
		<description><![CDATA[<p>In C# 9 the <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-9#support-for-code-generators"><code>ModuleInitializer</code></a>
atrribute was introduced which makes it easy to implement loading of native assemblies in your library.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/nativelibraryloader-for-assembly-with-moduleinitializer.html</link>
		<guid>https://smack0007.github.io/blog/2020/nativelibraryloader-for-assembly-with-moduleinitializer.html</guid>
		<pubDate>Fri, 18 Dec 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[GitHub Actions]]></title>
		<description><![CDATA[<p>My blog is now being generated via GitHub actions in <code>ubuntu-latest</code>. This allows me to rebuild my
blog everytime there is a pushed commit.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/github-actions.html</link>
		<guid>https://smack0007.github.io/blog/2020/github-actions.html</guid>
		<pubDate>Sun, 06 Dec 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Use nginx in docker to serve static files]]></title>
		<description><![CDATA[<p>Not sure how practical this really is but I thought it was neat. Run nginx and tell it to
serve some static content on your system.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/use-nginx-in-docker-to-serve-static-files.html</link>
		<guid>https://smack0007.github.io/blog/2020/use-nginx-in-docker-to-serve-static-files.html</guid>
		<pubDate>Tue, 01 Dec 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Add the current time to your command prompt]]></title>
		<description><![CDATA[<p>I am someone who never made the jump to Powershell and to this day still use my
cmd shell with pride. My cmd is very personalized at this point and is available
on <a href="https://github.com/smack0007/cmd">GitHub</a> though I&#39;m not sure how useful it is
for anyone but me. I use git and GitHub to synchronize my cmd between my different
machines.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/add-the-current-time-to-your-command-prompt.html</link>
		<guid>https://smack0007.github.io/blog/2020/add-the-current-time-to-your-command-prompt.html</guid>
		<pubDate>Thu, 26 Nov 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Execute different commands in MSBuild depending on platform]]></title>
		<description><![CDATA[<p>Another quick snippet that shows how to change what command will be executed in MSBuild
based on the OS the script is running on.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/execute-different-commands-in-msbuild-depending-on-platform.html</link>
		<guid>https://smack0007.github.io/blog/2020/execute-different-commands-in-msbuild-depending-on-platform.html</guid>
		<pubDate>Fri, 20 Nov 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Filter ItemGroup by extension in MSBuild]]></title>
		<description><![CDATA[<p>Just a quick snippet that shows how to filter an exiting ItemGroup by an extension.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/filter-itemgroup-by-extension-in-msbuild.html</link>
		<guid>https://smack0007.github.io/blog/2020/filter-itemgroup-by-extension-in-msbuild.html</guid>
		<pubDate>Wed, 04 Nov 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Use Newtonsoft.Json in .NET Core 3 Web Api]]></title>
		<description><![CDATA[<p>This post is mostly just distilling information I got from
<a href="https://dotnetcoretutorials.com/2019/12/19/using-newtonsoft-json-in-net-core-3-projects/">.NET Core Tutorials</a> to
revert back to <a href="https://www.newtonsoft.com/json">Newtonsoft.Json</a> in asp.net core WebApi.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/use-newtonsoft.json-in-.net-core-3-web-api.html</link>
		<guid>https://smack0007.github.io/blog/2020/use-newtonsoft.json-in-.net-core-3-web-api.html</guid>
		<pubDate>Thu, 22 Oct 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Node script for syntax highlighting]]></title>
		<description><![CDATA[<p>I decided to switch my blog to use highlightjs instead of the mixture of my own library and
<a href="https://github.com/windows-toolkit/ColorCode-Universal">ColorCode</a>. I still wanted everything to rendered statically
though so I decided to use <a href="https://highlightjs.org/">highlight.js</a> as it already offered instructions on how to use the
library from node.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/node-script-for-syntax-highlighting.html</link>
		<guid>https://smack0007.github.io/blog/2020/node-script-for-syntax-highlighting.html</guid>
		<pubDate>Wed, 14 Oct 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Angular in Visual Studio]]></title>
		<description><![CDATA[<p>Now that the <a href="https://devblogs.microsoft.com/visualstudio/angular-language-service-for-visual-studio/">Angular Language Service</a>
is available for Visual Studio working on Angular projects from inside Visual Studio is a viable option. The linked blog
post mentions a couple of ways of adding the Angular project to Visual Studio but I felt the suggestions left something
to be desired here is what I came up with.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/angular-in-visual-studio.html</link>
		<guid>https://smack0007.github.io/blog/2020/angular-in-visual-studio.html</guid>
		<pubDate>Thu, 08 Oct 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Creating a asp.net web app with an Angular frontend]]></title>
		<description><![CDATA[<p>We&#39;re going to create a what I call a &quot;WebShell&quot; application with asp.net core on the backend and Angular on the
frontend.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/creating-a-asp.net-web-app-with-an-angular-frontend.html</link>
		<guid>https://smack0007.github.io/blog/2020/creating-a-asp.net-web-app-with-an-angular-frontend.html</guid>
		<pubDate>Fri, 02 Oct 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Predictable Random Number Generation in TypeScript]]></title>
		<description><![CDATA[<p>I got the idea for using this type of RNG from the javidx9 video
<a href="https://www.youtube.com/watch?v=ZZY9YE7rZJw">Procedural Generation: Programming The Universe</a>.
It&#39;s a really good video as are most of the videos he produces so
I recommend you give it a watch. The algorithm he talks about in
the video is the <a href="https://en.wikipedia.org/wiki/Lehmer_random_number_generator">Lehmer random number generator</a>.</p>
<p>I&#39;m implementing a simple match the blocks game in TypeScript and I wanted to implement the algorithm 
mentioned there in TypeScript.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/predictable-random-number-generation-in-typescript.html</link>
		<guid>https://smack0007.github.io/blog/2020/predictable-random-number-generation-in-typescript.html</guid>
		<pubDate>Tue, 25 Aug 2020 00:00:00 GMT</pubDate>
	</item>
	<item>
		<title><![CDATA[Creating a tsexec command]]></title>
		<description><![CDATA[<p>I want to use TypeScript as a scripting language for my machine and
so I want to be able just to execute TypeScript files directly. There
are npm packages like <a href="https://www.npmjs.com/package/ts-node">ts-node</a>
that do this already but I wanted to have a crack at implementing it
myself. So this is the batch file I&#39;ve come up with so far.</p>]]></description>
		<link>https://smack0007.github.io/blog/2020/creating-a-tsexec-command.html</link>
		<guid>https://smack0007.github.io/blog/2020/creating-a-tsexec-command.html</guid>
		<pubDate>Fri, 21 Aug 2020 00:00:00 GMT</pubDate>
	</item>
	</channel>
</rss>

